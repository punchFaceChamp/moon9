// - rlyeh

#include <moon9/string/string.hpp>
#include <moon9/string/format.hpp>

#include <moon9/io/file.hpp>
#include <moon9/io/file.cpp>

int main( int argc, char **argv )
{
	moon9::strings args( argc, argv );

	if( args.size() < 2 )
		return 0;

	moon9::file file( args[1] );

	if( !file.size() )
		return 0;

	moon9::string data = file.read();
	moon9::string filename = moon9::string( file.name() ).lowercase().replace(".","_").replace("-","_");

	std::cout << moon9::string(
		"// generated by b2cpp\n"
		"\n"
		"namespace \1\n"
		"{\n"
		"\tsize_t size()\n"
		"\t{\n"
		"\t\treturn \2;\n"
		"\t}\n"
		"\tconst void* data()\n"
		"\t{\n"
		"\t\tconst unsigned char data[] = \n"
		"\t\t{\n",
		filename,
		file.size() );

	const int width = 16;

	for( size_t i = 0; i < data.size(); ++i )
	{
		std::string begin, end;

		begin = ( i % width == 0 ? "\t\t\t" : "," );
		end = ( i % width == width - 1 ? moon9::string(", // \1..\2\n", i-(width-1),i ) : "" );

		if( i == data.size() - 1 )
			end = "\n";

		std::cout << moon9::format( "%s0x%02x%s", begin.c_str(), (unsigned char)data[i], end.c_str() );
	}

	std::cout << moon9::string(
		"\t\t};\n"
		"\t\n"
		"\t\treturn data;\n"
		"\t}\n"
		"}\n //namespace \1"
		"\n",
		filename );

	return 0;
}
